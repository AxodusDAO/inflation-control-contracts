{
  "address": "0x4f1f2474803EA31Be15b7A880d69D906f272Af76",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tombAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BurnedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DaoFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DevFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "MasonryFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tombAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepletionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tombAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "buyBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSupplyContractionLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedFromTotalSupply",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnableTombLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burnableTombLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemableBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeemableBonds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTombCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTombPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tombPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTombUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tombPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tomb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tbond",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tshare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tombOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masonry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masonry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "masonryAllocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "masonryGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "masonrySetLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "masonrySetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtRatioPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxExpansionTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyContractionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFactorForPayingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousEpochTombPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageExpansionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageSaved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondDepletionFloorPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondDepletionFloorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bootstrapEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrapSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountPercent",
          "type": "uint256"
        }
      ],
      "name": "setDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devFundSharedPercent",
          "type": "uint256"
        }
      ],
      "name": "setExtraFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masonry",
          "type": "address"
        }
      ],
      "name": "setMasonry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtRatioPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtRatioPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDiscountRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpansionTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPremiumRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxPremiumRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyContractionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyContractionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyExpansionPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFactorForPayingDebt",
          "type": "uint256"
        }
      ],
      "name": "setMintingFactorForPayingDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumPercent",
          "type": "uint256"
        }
      ],
      "name": "setPremiumPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPremiumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setSupplyTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tombOracle",
          "type": "address"
        }
      ],
      "name": "setTombOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tombPriceCeiling",
          "type": "uint256"
        }
      ],
      "name": "setTombPriceCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tbond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tomb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tombOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tombPriceCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tombPriceOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tshare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3eb8d34ae83785f73250e4ebba216830518eed7e1ca634c892466e123d78f703",
  "receipt": {
    "to": null,
    "from": "0xb481E5DFAADe6cb0095df9b7d026D23ce5FA58AA",
    "contractAddress": "0x4f1f2474803EA31Be15b7A880d69D906f272Af76",
    "transactionIndex": 3,
    "gasUsed": "4061905",
    "logsBloom": "0x
    "blockHash": "0x2176ddab4fdd5f0ed053a47497a2f83058abbe59126611b107dca3617525a91a",
    "transactionHash": "0x3eb8d34ae83785f73250e4ebba216830518eed7e1ca634c892466e123d78f703",
    "logs": [],
    "blockNumber": 11452225,
    "cumulativeGasUsed": "4316929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8a5d8717ea449bf4061f825786e17f18",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"MasonryFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableTombLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableTombLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tomb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tbond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tshare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tombOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masonry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"masonryAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"masonryGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"masonrySetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"masonrySetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochTombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"}],\"name\":\"setMasonry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tombOracle\",\"type\":\"address\"}],\"name\":\"setTombOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setTombPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tomb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tshare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IMasonry.sol\\\";\\n\\n/*\\n  ______                __       _______\\n /_  __/___  ____ ___  / /_     / ____(_)___  ____ _____  ________\\n  / / / __ \\\\/ __ `__ \\\\/ __ \\\\   / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\\\n / / / /_/ / / / / / / /_/ /  / __/ / / / / / /_/ / / / / /__/  __/\\n/_/  \\\\____/_/ /_/ /_/_.___/  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/\\n\\n    http://tomb.finance\\n*/\\ncontract Treasury is ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply = [\\n        address(0x2b0338cd8483Fd139951173FF7e560Da0Fc281d1), // TombGenesisPool\\n        address(0xE7310adf7A43B7B4cc673e1DD0Faa468946Cc898), // new TombRewardPool\\n        address(0xA7B16703470055881e7EE093e9b0bF537f29CD4d) // old TombRewardPool\\n    ];\\n\\n    // core components\\n    address public tomb;\\n    address public tbond;\\n    address public tshare;\\n\\n    address public masonry;\\n    address public tombOracle;\\n\\n    // price\\n    uint256 public tombPriceOne;\\n    uint256 public tombPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of TOMB price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochTombPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra TOMB during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 tombAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 tombAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event MasonryFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition() {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getTombPrice() > tombPriceCeiling) ? 0 : getTombCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator() {\\n        require(\\n            IBasisAsset(tomb).operator() == address(this) &&\\n                IBasisAsset(tbond).operator() == address(this) &&\\n                IBasisAsset(tshare).operator() == address(this) &&\\n                Operator(masonry).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getTombPrice() public view returns (uint256 tombPrice) {\\n        try IOracle(tombOracle).consult(tomb, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult TOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    function getTombUpdatedPrice() public view returns (uint256 _tombPrice) {\\n        try IOracle(tombOracle).twap(tomb, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult TOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableTombLeft() public view returns (uint256 _burnableTombLeft) {\\n        uint256 _tombPrice = getTombPrice();\\n        if (_tombPrice <= tombPriceOne) {\\n            uint256 _tombSupply = getTombCirculatingSupply();\\n            uint256 _bondMaxSupply = _tombSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(tbond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableTomb = _maxMintableBond.mul(_tombPrice).div(1e18);\\n                _burnableTombLeft = Math.min(epochSupplyContractionLeft, _maxBurnableTomb);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _tombPrice = getTombPrice();\\n        if (_tombPrice > tombPriceCeiling) {\\n            uint256 _totalTomb = IERC20(tomb).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalTomb.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _tombPrice = getTombPrice();\\n        if (_tombPrice <= tombPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = tombPriceOne;\\n            } else {\\n                uint256 _bondAmount = tombPriceOne.mul(1e18).div(_tombPrice); // to burn 1 TOMB\\n                uint256 _discountAmount = _bondAmount.sub(tombPriceOne).mul(discountPercent).div(10000);\\n                _rate = tombPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _tombPrice = getTombPrice();\\n        if (_tombPrice > tombPriceCeiling) {\\n            uint256 _tombPricePremiumThreshold = tombPriceOne.mul(premiumThreshold).div(100);\\n            if (_tombPrice >= _tombPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _tombPrice.sub(tombPriceOne).mul(premiumPercent).div(10000);\\n                _rate = tombPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = tombPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _tomb,\\n        address _tbond,\\n        address _tshare,\\n        address _tombOracle,\\n        address _masonry,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        tomb = _tomb;\\n        tbond = _tbond;\\n        tshare = _tshare;\\n        tombOracle = _tombOracle;\\n        masonry = _masonry;\\n        startTime = _startTime;\\n\\n        tombPriceOne = 10**18;\\n        tombPriceCeiling = tombPriceOne.mul(101).div(100);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [0 ether, 500000 ether, 1000000 ether, 1500000 ether, 2000000 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether];\\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for masonry\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn TOMB and mint tBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 28 epochs with 4.5% expansion\\n        bootstrapEpochs = 28;\\n        bootstrapSupplyExpansionPercent = 450;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(tomb).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setMasonry(address _masonry) external onlyOperator {\\n        masonry = _masonry;\\n    }\\n\\n    function setTombOracle(address _tombOracle) external onlyOperator {\\n        tombOracle = _tombOracle;\\n    }\\n\\n    function setTombPriceCeiling(uint256 _tombPriceCeiling) external onlyOperator {\\n        require(_tombPriceCeiling >= tombPriceOne && _tombPriceCeiling <= tombPriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        tombPriceCeiling = _tombPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold >= tombPriceCeiling, \\\"_premiumThreshold exceeds tombPriceCeiling\\\");\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateTombPrice() internal {\\n        try IOracle(tombOracle).update() {} catch {}\\n    }\\n\\n    function getTombCirculatingSupply() public view returns (uint256) {\\n        IERC20 tombErc20 = IERC20(tomb);\\n        uint256 totalSupply = tombErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(tombErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _tombAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_tombAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 tombPrice = getTombPrice();\\n        require(tombPrice == targetPrice, \\\"Treasury: TOMB price moved\\\");\\n        require(\\n            tombPrice < tombPriceOne, // price < $1\\n            \\\"Treasury: tombPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_tombAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _tombAmount.mul(_rate).div(1e18);\\n        uint256 tombSupply = getTombCirculatingSupply();\\n        uint256 newBondSupply = IERC20(tbond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= tombSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(tomb).burnFrom(msg.sender, _tombAmount);\\n        IBasisAsset(tbond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_tombAmount);\\n        _updateTombPrice();\\n\\n        emit BoughtBonds(msg.sender, _tombAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 tombPrice = getTombPrice();\\n        require(tombPrice == targetPrice, \\\"Treasury: TOMB price moved\\\");\\n        require(\\n            tombPrice > tombPriceCeiling, // price > $1.01\\n            \\\"Treasury: tombPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _tombAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(IERC20(tomb).balanceOf(address(this)) >= _tombAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _tombAmount));\\n\\n        IBasisAsset(tbond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(tomb).safeTransfer(msg.sender, _tombAmount);\\n\\n        _updateTombPrice();\\n\\n        emit RedeemedBonds(msg.sender, _tombAmount, _bondAmount);\\n    }\\n\\n    function _sendToMasonry(uint256 _amount) internal {\\n        IBasisAsset(tomb).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(tomb).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(tomb).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(tomb).safeApprove(masonry, 0);\\n        IERC20(tomb).safeApprove(masonry, _amount);\\n        IMasonry(masonry).allocateSeigniorage(_amount);\\n        emit MasonryFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _tombSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_tombSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateTombPrice();\\n        previousEpochTombPrice = getTombPrice();\\n        uint256 tombSupply = getTombCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToMasonry(tombSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochTombPrice > tombPriceCeiling) {\\n                // Expansion ($TOMB Price > 1 $FTM): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(tbond).totalSupply();\\n                uint256 _percentage = previousEpochTombPrice.sub(tombPriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForMasonry;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(tombSupply).mul(1e14);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForMasonry = tombSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = tombSupply.mul(_percentage).div(1e18);\\n                    _savedForMasonry = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForMasonry);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForMasonry > 0) {\\n                    _sendToMasonry(_savedForMasonry);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(tomb).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(tomb), \\\"tomb\\\");\\n        require(address(_token) != address(tbond), \\\"bond\\\");\\n        require(address(_token) != address(tshare), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function masonrySetOperator(address _operator) external onlyOperator {\\n        IMasonry(masonry).setOperator(_operator);\\n    }\\n\\n    function masonrySetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IMasonry(masonry).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function masonryAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IMasonry(masonry).allocateSeigniorage(amount);\\n    }\\n\\n    function masonryGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IMasonry(masonry).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x83d5c89aea6eab7e8c4e65a23c81cae63c3d4e7305bd402e4b785cf332502435\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0xd7a0645a5d2c8a0204f2c536388b034e9fa3b725283c36ebc38c0282627ae4ba\",\"license\":\"MIT\"},\"contracts/interfaces/IMasonry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMasonry {\\n    function balanceOf(address _mason) external view returns (uint256);\\n\\n    function earned(address _mason) external view returns (uint256);\\n\\n    function canWithdraw(address _mason) external view returns (bool);\\n\\n    function canClaimReward(address _mason) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getTombPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\\n}\\n\",\"keccak256\":\"0xd5814491890c0f1e890a315dc9454d39240bda1dac6df7a5b91715ad833b2838\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\",\"keccak256\":\"0xfe915dcf8502dacae92ed455f5e9e3c5cc159a7ad809f11b333de493c98828d3\",\"license\":\"MIT\"},\"contracts/lib/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0x3ee5b5170fa8ccf39d30a1980b470fb21b3a1cefe47921d98a1a5ebd85ff7d2f\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8e558ef5a039ce6ecd27eef794d31a136fd7b0e8c473bd86daa5baf7e8cf7a26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6001805460ff60a01b191690556000600381815560049190915560e0604052732b0338cd8483fd139951173ff7e560da0fc281d1608090815273e7310adf7a43b7b4cc673e1dd0faa468946cc89860a05273a7b16703470055881e7ee093e9b0bf537f29cd4d60c0526200007791600591906200008c565b503480156200008557600080fd5b5062000117565b828054828255906000526020600020908101928215620000e4579160200282015b82811115620000e457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620000ad565b50620000f2929150620000f6565b5090565b5b80821115620000f25780546001600160a01b0319168155600101620000f7565b6146b380620001276000396000f3fe608060405234801561001057600080fd5b50600436106104285760003560e01c806382cad8381161022b578063b981cdf311610130578063d4b14944116100b8578063e90b245411610087578063e90b2454146109b6578063ee6822a7146109be578063f14698de146109c6578063f7741103146109ce578063fcb6f008146109d657610428565b8063d4b149441461095a578063d5d3b26c14610980578063d98f2495146109a6578063da3ed419146109ae57610428565b8063c5967c26116100ff578063c5967c261461091d578063c5cc772d14610925578063c8412d021461092d578063c8f987f314610935578063cecce38e1461093d57610428565b8063b981cdf3146108b6578063bcc81f19146108be578063be266d54146108f8578063c040f23a1461091557610428565b806395b6ef0c116101b3578063a204452b11610182578063a204452b1461085b578063b3406cfc14610878578063b3ab15fb14610880578063b4d1d795146108a6578063b8a878f9146108ae57610428565b806395b6ef0c146107b857806398b762a1146108045780639982002514610821578063a0487eea1461083e57610428565b80638d934f74116101fa5780638d934f7414610729578063900cf0cf1461073157806391bbfed514610739578063940e60641461075c578063951357d41461078257610428565b806382cad838146106df578063874106cc146106fc5780638a6426e7146107045780638c664db61461070c57610428565b80634294cf8e116103315780635a0fc79c116102b957806372c054f91161028857806372c054f91461067e578063734f70961461068657806375be5ae1146106a957806378e97925146106cf57806381d11eaf146106d757610428565b80635a0fc79c146106405780635b7561791461064857806362ac58e41461065057806363f96cf41461067657610428565b806354f04a111161030057806354f04a11146105e857806355ebdeef1461060b578063570ca73514610613578063591663e11461061b57806359bf5d391461063857610428565b80634294cf8e146105695780634390d2a814610571578063499f3f191461059557806354575af4146105b257610428565b8063158ef93e116103b45780632e9c7b65116103835780632e9c7b6514610517578063392e53cd1461051f5780633ed9ae25146105275780634013a08e1461054457806340af7ba51461054c57610428565b8063158ef93e146104e357806319a98349146104ff57806322f832cd1461050757806329ef19191461050f57610428565b80630cac939c116103fb5780630cac939c1461048b5780630cf60175146104935780630db7eb0b1461049b578063118ebbf9146104a3578063154ec2db146104c657610428565b806303be7e761461042d57806304e5c7b11461044757806309bb4f92146104665780630b5bcec71461046e575b600080fd5b6104356109de565b60408051918252519081900360200190f35b6104646004803603602081101561045d57600080fd5b50356109e4565b005b610435610ab3565b6104646004803603602081101561048457600080fd5b5035610b8e565b610435610c2a565b610435610d38565b610435610de3565b610464600480360360408110156104b957600080fd5b5080359060200135610e85565b610464600480360360208110156104dc57600080fd5b50356114e2565b6104eb611587565b604080519115158252519081900360200190f35b610435611597565b61043561159d565b6104356115a3565b6104356115a9565b6104eb6115af565b6104646004803603602081101561053d57600080fd5b50356115bf565b610435611679565b6104646004803603602081101561056257600080fd5b503561167f565b610435611724565b61057961172a565b604080516001600160a01b039092168252519081900360200190f35b610464600480360360208110156105ab57600080fd5b5035611739565b610464600480360360608110156105c857600080fd5b506001600160a01b038135811691602081013591604090910135166117d6565b610464600480360360408110156105fe57600080fd5b508035906020013561191b565b61043561205a565b610579612060565b6104646004803603602081101561063157600080fd5b503561206f565b610435612111565b610435612117565b61046461211d565b6104646004803603602081101561066657600080fd5b50356001600160a01b03166127cf565b610579612881565b610435612890565b6104646004803603604081101561069c57600080fd5b5080359060200135612950565b610464600480360360208110156106bf57600080fd5b50356001600160a01b0316612a09565b610435612a74565b610435612a7a565b610579600480360360208110156106f557600080fd5b5035612a80565b610435612aa7565b610435612aad565b6104646004803603602081101561072257600080fd5b5035612bed565b610579612c8f565b610435612c9e565b6104646004803603604081101561074f57600080fd5b5080359060200135612ca4565b6104eb6004803603604081101561077257600080fd5b5060ff8135169060200135612d9c565b6104646004803603606081101561079857600080fd5b506001600160a01b03813581169160208101359160409091013516612eb8565b610464600480360360c08110156107ce57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a00135612f7b565b6104646004803603602081101561081a57600080fd5b5035613268565b6104356004803603602081101561083757600080fd5b50356132b6565b6104356004803603602081101561085457600080fd5b50356132d4565b6104646004803603602081101561087157600080fd5b50356132e1565b61043561332f565b6104646004803603602081101561089657600080fd5b50356001600160a01b0316613335565b6104356133a0565b6104356133a6565b6105796133ac565b610464600480360360808110156108d457600080fd5b506001600160a01b03813581169160208101359160408201351690606001356133bb565b6104646004803603602081101561090e57600080fd5b5035613550565b6105796135e6565b6104356135f5565b61043561361f565b610435613681565b610435613687565b6104646004803603602081101561095357600080fd5b503561368d565b6104eb6004803603604081101561097057600080fd5b5060ff813516906020013561372e565b6104646004803603602081101561099657600080fd5b50356001600160a01b0316613828565b610435613893565b610435613899565b61043561389f565b6105796138a5565b6104356138b4565b6105796138ba565b6104356138c9565b60215481565b6001546001600160a01b03163314610a2d5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600c54811015610a6e5760405162461bcd60e51b815260040180806020018281038252602a815260200180614382602a913960400191505060405180910390fd5b6096811115610aae5760405162461bcd60e51b81526004018080602001828103825260248152602001806144106024913960400191505060405180910390fd5b601b55565b600a5460065460408051633ddac95360e01b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015610b1557600080fd5b505afa925050508015610b3a57506040513d6020811015610b3557600080fd5b505160015b610b755760405162461bcd60e51b81526004018080602001828103825260368152602001806143da6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff16905090565b6001546001600160a01b03163314610bd75760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600a8110158015610bea57506103e88111155b610c255760405162461bcd60e51b81526004018080602001828103825260288152602001806144f96028913960400191505060405180910390fd5b601055565b600080610c35610ab3565b9050600b548111610d34576000610c4a612aad565b90506000610c6f612710610c69601454856138cf90919063ffffffff16565b9061392f565b90506000600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b5051905080821115610d30576000610d038383613996565b90506000610d1d670de0b6b3a7640000610c6984896138cf565b9050610d2b600454826139f3565b965050505b5050505b5090565b600080610d43610ab3565b9050600b548111610d3457601a54610d5f57600b549150610d34565b6000610d8282610c69670de0b6b3a7640000600b546138cf90919063ffffffff16565b90506000610dad612710610c69601a54610da7600b548761399690919063ffffffff16565b906138cf565b600b54909150610dbd9082613a09565b93506000601854118015610dd2575060185484115b15610ddd5760185493505b50505090565b600080610dee610ab3565b9050600c54811115610d34576000610e186064610c69601b54600b546138cf90919063ffffffff16565b9050808210610e7a576000610e44612710610c69601c54610da7600b548861399690919063ffffffff16565b600b54909150610e549082613a09565b93506000601954118015610e69575060195484115b15610e745760195493505b50610e80565b600b5492505b505090565b610e8d613a63565b15610ec95760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b610ed1613a82565b15610f0d5760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b600254421015610f60576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610fa457600080fd5b505afa158015610fb8573d6000803e3d6000fd5b505050506040513d6020811015610fce57600080fd5b50516001600160a01b031614801561105c57506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b50516001600160a01b0316145b80156110de57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d60208110156110d157600080fd5b50516001600160a01b0316145b801561116057506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d602081101561115357600080fd5b50516001600160a01b0316145b6111b1576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116111f05760405162461bcd60e51b815260040180806020018281038252602e8152602001806143ac602e913960400191505060405180910390fd5b60006111fa610ab3565b9050818114611250576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20544f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600c5481116112905760405162461bcd60e51b81526004018080602001828103825260328152602001806145f46032913960400191505060405180910390fd5b600061129a610de3565b9050600081116112f1576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611309670de0b6b3a7640000610c6987856138cf565b600654604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b505110156113c25760405162461bcd60e51b815260040180806020018281038252602581526020018061445a6025913960400191505060405180910390fd5b6113da6113d1600d54836139f3565b600d5490613996565b600d556007546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505060065461146092506001600160a01b031690503383613aa1565b611468613af3565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b6001546001600160a01b0316331461152b5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b614e20811115611582576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601a55565b600154600160a01b900460ff1681565b600c5481565b60125481565b601a5481565b60195481565b600154600160a01b900460ff1690565b6001546001600160a01b031633146116085760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600b54811015801561163457506116306064610c696078600b546138cf90919063ffffffff16565b8111155b611674576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600c55565b601d5481565b6001546001600160a01b031633146116c85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b614e2081111561171f576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601c55565b600b5481565b6020546001600160a01b031681565b6001546001600160a01b031633146117825760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b61271081101580156117965750614e208111155b6117d15760405162461bcd60e51b81526004018080602001828103825260298152602001806144d06029913960400191505060405180910390fd5b601d55565b6001546001600160a01b0316331461181f5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6006546001600160a01b038481169116141561186b576040805162461bcd60e51b815260206004808301919091526024820152633a37b6b160e11b604482015290519081900360640190fd5b6007546001600160a01b03848116911614156118b7576040805162461bcd60e51b81526020600480830191909152602482015263189bdb9960e21b604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611902576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b6119166001600160a01b0384168284613aa1565b505050565b611923613a63565b1561195f5760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b611967613a82565b156119a35760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b6002544210156119f6576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d6020811015611a6457600080fd5b50516001600160a01b0316148015611af257506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d6020811015611ae557600080fd5b50516001600160a01b0316145b8015611b7457506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611b3d57600080fd5b505afa158015611b51573d6000803e3d6000fd5b505050506040513d6020811015611b6757600080fd5b50516001600160a01b0316145b8015611bf657506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b50516001600160a01b0316145b611c47576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60008211611c865760405162461bcd60e51b81526004018080602001828103825260308152602001806144a06030913960400191505060405180910390fd5b6000611c90610ab3565b9050818114611ce6576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20544f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600b548110611d265760405162461bcd60e51b81526004018080602001828103825260328152602001806145f46032913960400191505060405180910390fd5b600454831115611d675760405162461bcd60e51b815260040180806020018281038252602a815260200180614626602a913960400191505060405180910390fd5b6000611d71610d38565b905060008111611dc8576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611de0670de0b6b3a7640000610c6987856138cf565b90506000611dec612aad565b90506000611e7483600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b505190613a09565b9050611e91612710610c69601454856138cf90919063ffffffff16565b811115611edb576040805162461bcd60e51b81526020600482015260136024820152726f766572206d6178206465627420726174696f60681b604482015290519081900360640190fd5b6006546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b5050600754604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b158015611f9a57600080fd5b505af1158015611fae573d6000803e3d6000fd5b505050506040513d6020811015611fc457600080fd5b5050600454611fd39088613996565b600455611fde613af3565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b601f5481565b6001546001600160a01b031681565b6001546001600160a01b031633146120b85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6103e881101580156120cc57506127108111155b61210c576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b600d5490565b600d5481565b612125613a63565b156121615760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b612169613a82565b156121a55760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b6002544210156121f8576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6122006135f5565b421015612254576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561229857600080fd5b505afa1580156122ac573d6000803e3d6000fd5b505050506040513d60208110156122c257600080fd5b50516001600160a01b031614801561235057506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d602081101561234357600080fd5b50516001600160a01b0316145b80156123d257506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561239b57600080fd5b505afa1580156123af573d6000803e3d6000fd5b505050506040513d60208110156123c557600080fd5b50516001600160a01b0316145b801561245457506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561241d57600080fd5b505afa158015612431573d6000803e3d6000fd5b505050506040513d602081101561244757600080fd5b50516001600160a01b0316145b6124a5576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6124ad613af3565b6124b5610ab3565b601755600d546000906124d0906124ca612aad565b90613996565b90506015546003541015612506576125016124fc612710610c69601654856138cf90919063ffffffff16565b613b57565b612753565b600c54601754111561275357600754604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d602081101561258157600080fd5b5051600b5460175491925060009161259891613996565b905060008060006125b2655af3107a4000610da788613e97565b9050808411156125c0578093505b6125db612710610c69601154886138cf90919063ffffffff16565b600d5410612600576125f9670de0b6b3a7640000610c6988876138cf565b915061266c565b6000612618670de0b6b3a7640000610c6989886138cf565b9050612635612710610c69601254846138cf90919063ffffffff16565b92506126418184613996565b601d549094501561266a57612667612710610c69601d54876138cf90919063ffffffff16565b93505b505b811561267b5761267b82613b57565b821561274d57600d5461268e9084613a09565b600d55600654604080516340c10f1960e01b81523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156126e557600080fd5b505af11580156126f9573d6000803e3d6000fd5b505050506040513d602081101561270f57600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600354612762906001613a09565b600355600c54612770610ab3565b1161278e57612789612710610c69601354610da7612aad565b612791565b60005b600455436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6001546001600160a01b031633146128185760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6009546040805163b3ab15fb60e01b81526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b15801561286657600080fd5b505af115801561287a573d6000803e3d6000fd5b5050505050565b6009546001600160a01b031681565b60008061289b610ab3565b9050600c54811115610d3457600654604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d602081101561291c57600080fd5b50519050600061292a610de3565b90508015610ddd5761294881610c6984670de0b6b3a76400006138cf565b935050505090565b6001546001600160a01b031633146129995760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60095460408051632ffaaa0960e01b8152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b1580156129ed57600080fd5b505af1158015612a01573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314612a525760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60025481565b60115481565b60058181548110612a8d57fe5b6000918252602090912001546001600160a01b0316905081565b60165481565b600654604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015612af657600080fd5b505afa158015612b0a573d6000803e3d6000fd5b505050506040513d6020811015612b2057600080fd5b505190506000805b60055460ff82161015612be257612bd8846001600160a01b03166370a0823160058460ff1681548110612b5757fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015612ba557600080fd5b505afa158015612bb9573d6000803e3d6000fd5b505050506040513d6020811015612bcf57600080fd5b50518390613a09565b9150600101612b28565b506129488282613996565b6001546001600160a01b03163314612c365760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6101f48110158015612c4a57506127108111155b612c8a576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601155565b601e546001600160a01b031681565b60035481565b6001546001600160a01b03163314612ced5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6078821115612d43576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b60648110158015612d5657506103e88111155b612d915760405162461bcd60e51b815260040180806020018281038252602e815260200180614650602e913960400191505060405180910390fd5b601591909155601655565b6001546000906001600160a01b03163314612de85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60098360ff1610612e2a5760405162461bcd60e51b81526004018080602001828103825260298152602001806145216029913960400191505060405180910390fd5b60ff831615612e5c57600e6001840360ff1681548110612e4657fe5b90600052602060002001548211612e5c57600080fd5b60088360ff161015612e9157600e8360010160ff1681548110612e7b57fe5b90600052602060002001548210612e9157600080fd5b81600e8460ff1681548110612ea257fe5b6000918252602090912001555060015b92915050565b6001546001600160a01b03163314612f015760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60095460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b158015612f5e57600080fd5b505af1158015612f72573d6000803e3d6000fd5b50505050505050565b600154600160a01b900460ff1615612fda576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600680546001600160a01b03199081166001600160a01b0389811691909117909255600780548216888416179055600880548216878416179055600a80548216868416179055600980549091169184169190911790556002819055670de0b6b3a7640000600b81905561305590606490610c699060656138cf565b600c556040805161012081018252600081526969e10de76676d0800000602082015269d3c21bcecceda1000000918101919091526a013da329b633647180000060608201526a01a784379d99db4200000060808201526a0422ca8b0a00a42500000060a08201526a084595161401484a00000060c08201526a108b2a2c2802909400000060e08201526a295be96e640669720000006101008201526130fe90600e9060096142d5565b5060408051610120810182526101c28152610190602082015261015e9181019190915261012c606082015260fa608082015260c860a0820152609660c0820152607d60e0820152606461010082015261315b90600f90600961432b565b50610190601055612710601155610dac601281905561012c601355601455606e601b55611b58601c9081556015556101c2601655600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156131da57600080fd5b505afa1580156131ee573d6000803e3d6000fd5b505050506040513d602081101561320457600080fd5b5051600d55600180546001600160a01b031960ff60a01b19909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a2505050505050565b6001546001600160a01b031633146132b15760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b601855565b600e81815481106132c357fe5b600091825260209091200154905081565b600f81815481106132c357fe5b6001546001600160a01b0316331461332a5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b601955565b60175481565b6001546001600160a01b0316331461337e5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61546081565b60185481565b6007546001600160a01b031681565b6001546001600160a01b031633146134045760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6001600160a01b038416613448576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b610bb883111561348e576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b0382166134d2576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115613518576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601e80546001600160a01b03199081166001600160a01b0396871617909155601f939093556020805490931691909316179055602155565b6001546001600160a01b031633146135995760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600954604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561286657600080fd5b6006546001600160a01b031681565b600061361a6136116154606003546138cf90919063ffffffff16565b60025490613a09565b905090565b600a5460065460408051630d01142560e31b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015610b1557600080fd5b601c5481565b601b5481565b6001546001600160a01b031633146136d65760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b606481101580156136e957506105dc8111155b613729576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601355565b6001546000906001600160a01b0316331461377a5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60098360ff16106137bc5760405162461bcd60e51b81526004018080602001828103825260298152602001806145216029913960400191505060405180910390fd5b600a82101580156137cf57506103e88211155b613817576040805162461bcd60e51b81526020600482015260146024820152735f76616c75653a206f7574206f662072616e676560601b604482015290519081900360640190fd5b81600f8460ff1681548110612ea257fe5b6001546001600160a01b031633146138715760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60105481565b60145481565b60135481565b6008546001600160a01b031681565b60155481565b600a546001600160a01b031681565b60045481565b6000826138de57506000612eb2565b828202828482816138eb57fe5b04146139285760405162461bcd60e51b815260040180806020018281038252602181526020018061447f6021913960400191505060405180910390fd5b9392505050565b6000808211613985576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161398e57fe5b049392505050565b6000828211156139ed576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000818310613a025781613928565b5090919050565b600082820183811015613928576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611916908490613ef4565b600a60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613b4357600080fd5b505af1925050508015613b54575060015b50565b600654604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015613bab57600080fd5b505af1158015613bbf573d6000803e3d6000fd5b505050506040513d6020811015613bd557600080fd5b5050601f5460009015613cc057613bfd612710610c69601f54856138cf90919063ffffffff16565b600654601e546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b158015613c5857600080fd5b505af1158015613c6c573d6000803e3d6000fd5b505050506040513d6020811015613c8257600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b60215460009015613da657613ce6612710610c69602154866138cf90919063ffffffff16565b600654602080546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101869052905194955092169263a9059cbb9260448082019392918290030181600087803b158015613d3e57600080fd5b505af1158015613d52573d6000803e3d6000fd5b505050506040513d6020811015613d6857600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b613db4816124ca8585613996565b600954600654919450613dd5916001600160a01b0390811691166000613fa5565b600954600654613df2916001600160a01b03918216911685613fa5565b600954604080516397ffe1d760e01b81526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015613e3f57600080fd5b505af1158015613e53573d6000803e3d6000fd5b5050604080514281526020810187905281517fa72fa2f263b243b0f0e1fec5f3d49d33de573d15929b6b730c6b8ab3838c1c4d9450908190039091019150a1505050565b600060085b600e8160ff1681548110613eac57fe5b90600052602060002001548310613ee157600f8160ff1681548110613ecd57fe5b600091825260209091200154601055613eea565b60001901613e9c565b5050601054919050565b6060613f49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140b89092919063ffffffff16565b80519091501561191657808060200190516020811015613f6857600080fd5b50516119165760405162461bcd60e51b815260040180806020018281038252602a81526020018061456e602a913960400191505060405180910390fd5b80158061402b575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613ffd57600080fd5b505afa158015614011573d6000803e3d6000fd5b505050506040513d602081101561402757600080fd5b5051155b6140665760405162461bcd60e51b81526004018080602001828103825260368152602001806145be6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611916908490613ef4565b60606140c784846000856140cf565b949350505050565b6060824710156141105760405162461bcd60e51b81526004018080602001828103825260268152602001806144346026913960400191505060405180910390fd5b6141198561422b565b61416a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106141a95780518252601f19909201916020918201910161418a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461420b576040519150601f19603f3d011682016040523d82523d6000602084013e614210565b606091505b5091509150614220828286614231565b979650505050505050565b3b151590565b60608315614240575081613928565b8251156142505782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561429a578181015183820152602001614282565b50505050905090810190601f1680156142c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090810192821561431f579160200282015b8281111561431f57825182906affffffffffffffffffffff169055916020019190600101906142f5565b50610d3492915061436c565b82805482825590600052602060002090810192821561431f579160200282015b8281111561431f578251829061ffff1690559160200191906001019061434b565b5b80821115610d34576000815560010161436d56fe5f7072656d69756d5468726573686f6c64206578636565647320746f6d6250726963654365696c696e6754726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e7454726561737572793a206661696c656420746f20636f6e73756c7420544f4d422070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636554726561737572793a20746f6d625072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220f84776b0ef1e217fe627ac94bbc4bef59119545fd8d73adc6230de7ccb9e367c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104285760003560e01c806382cad8381161022b578063b981cdf311610130578063d4b14944116100b8578063e90b245411610087578063e90b2454146109b6578063ee6822a7146109be578063f14698de146109c6578063f7741103146109ce578063fcb6f008146109d657610428565b8063d4b149441461095a578063d5d3b26c14610980578063d98f2495146109a6578063da3ed419146109ae57610428565b8063c5967c26116100ff578063c5967c261461091d578063c5cc772d14610925578063c8412d021461092d578063c8f987f314610935578063cecce38e1461093d57610428565b8063b981cdf3146108b6578063bcc81f19146108be578063be266d54146108f8578063c040f23a1461091557610428565b806395b6ef0c116101b3578063a204452b11610182578063a204452b1461085b578063b3406cfc14610878578063b3ab15fb14610880578063b4d1d795146108a6578063b8a878f9146108ae57610428565b806395b6ef0c146107b857806398b762a1146108045780639982002514610821578063a0487eea1461083e57610428565b80638d934f74116101fa5780638d934f7414610729578063900cf0cf1461073157806391bbfed514610739578063940e60641461075c578063951357d41461078257610428565b806382cad838146106df578063874106cc146106fc5780638a6426e7146107045780638c664db61461070c57610428565b80634294cf8e116103315780635a0fc79c116102b957806372c054f91161028857806372c054f91461067e578063734f70961461068657806375be5ae1146106a957806378e97925146106cf57806381d11eaf146106d757610428565b80635a0fc79c146106405780635b7561791461064857806362ac58e41461065057806363f96cf41461067657610428565b806354f04a111161030057806354f04a11146105e857806355ebdeef1461060b578063570ca73514610613578063591663e11461061b57806359bf5d391461063857610428565b80634294cf8e146105695780634390d2a814610571578063499f3f191461059557806354575af4146105b257610428565b8063158ef93e116103b45780632e9c7b65116103835780632e9c7b6514610517578063392e53cd1461051f5780633ed9ae25146105275780634013a08e1461054457806340af7ba51461054c57610428565b8063158ef93e146104e357806319a98349146104ff57806322f832cd1461050757806329ef19191461050f57610428565b80630cac939c116103fb5780630cac939c1461048b5780630cf60175146104935780630db7eb0b1461049b578063118ebbf9146104a3578063154ec2db146104c657610428565b806303be7e761461042d57806304e5c7b11461044757806309bb4f92146104665780630b5bcec71461046e575b600080fd5b6104356109de565b60408051918252519081900360200190f35b6104646004803603602081101561045d57600080fd5b50356109e4565b005b610435610ab3565b6104646004803603602081101561048457600080fd5b5035610b8e565b610435610c2a565b610435610d38565b610435610de3565b610464600480360360408110156104b957600080fd5b5080359060200135610e85565b610464600480360360208110156104dc57600080fd5b50356114e2565b6104eb611587565b604080519115158252519081900360200190f35b610435611597565b61043561159d565b6104356115a3565b6104356115a9565b6104eb6115af565b6104646004803603602081101561053d57600080fd5b50356115bf565b610435611679565b6104646004803603602081101561056257600080fd5b503561167f565b610435611724565b61057961172a565b604080516001600160a01b039092168252519081900360200190f35b610464600480360360208110156105ab57600080fd5b5035611739565b610464600480360360608110156105c857600080fd5b506001600160a01b038135811691602081013591604090910135166117d6565b610464600480360360408110156105fe57600080fd5b508035906020013561191b565b61043561205a565b610579612060565b6104646004803603602081101561063157600080fd5b503561206f565b610435612111565b610435612117565b61046461211d565b6104646004803603602081101561066657600080fd5b50356001600160a01b03166127cf565b610579612881565b610435612890565b6104646004803603604081101561069c57600080fd5b5080359060200135612950565b610464600480360360208110156106bf57600080fd5b50356001600160a01b0316612a09565b610435612a74565b610435612a7a565b610579600480360360208110156106f557600080fd5b5035612a80565b610435612aa7565b610435612aad565b6104646004803603602081101561072257600080fd5b5035612bed565b610579612c8f565b610435612c9e565b6104646004803603604081101561074f57600080fd5b5080359060200135612ca4565b6104eb6004803603604081101561077257600080fd5b5060ff8135169060200135612d9c565b6104646004803603606081101561079857600080fd5b506001600160a01b03813581169160208101359160409091013516612eb8565b610464600480360360c08110156107ce57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a00135612f7b565b6104646004803603602081101561081a57600080fd5b5035613268565b6104356004803603602081101561083757600080fd5b50356132b6565b6104356004803603602081101561085457600080fd5b50356132d4565b6104646004803603602081101561087157600080fd5b50356132e1565b61043561332f565b6104646004803603602081101561089657600080fd5b50356001600160a01b0316613335565b6104356133a0565b6104356133a6565b6105796133ac565b610464600480360360808110156108d457600080fd5b506001600160a01b03813581169160208101359160408201351690606001356133bb565b6104646004803603602081101561090e57600080fd5b5035613550565b6105796135e6565b6104356135f5565b61043561361f565b610435613681565b610435613687565b6104646004803603602081101561095357600080fd5b503561368d565b6104eb6004803603604081101561097057600080fd5b5060ff813516906020013561372e565b6104646004803603602081101561099657600080fd5b50356001600160a01b0316613828565b610435613893565b610435613899565b61043561389f565b6105796138a5565b6104356138b4565b6105796138ba565b6104356138c9565b60215481565b6001546001600160a01b03163314610a2d5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600c54811015610a6e5760405162461bcd60e51b815260040180806020018281038252602a815260200180614382602a913960400191505060405180910390fd5b6096811115610aae5760405162461bcd60e51b81526004018080602001828103825260248152602001806144106024913960400191505060405180910390fd5b601b55565b600a5460065460408051633ddac95360e01b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015610b1557600080fd5b505afa925050508015610b3a57506040513d6020811015610b3557600080fd5b505160015b610b755760405162461bcd60e51b81526004018080602001828103825260368152602001806143da6036913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff16905090565b6001546001600160a01b03163314610bd75760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600a8110158015610bea57506103e88111155b610c255760405162461bcd60e51b81526004018080602001828103825260288152602001806144f96028913960400191505060405180910390fd5b601055565b600080610c35610ab3565b9050600b548111610d34576000610c4a612aad565b90506000610c6f612710610c69601454856138cf90919063ffffffff16565b9061392f565b90506000600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc157600080fd5b505afa158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b5051905080821115610d30576000610d038383613996565b90506000610d1d670de0b6b3a7640000610c6984896138cf565b9050610d2b600454826139f3565b965050505b5050505b5090565b600080610d43610ab3565b9050600b548111610d3457601a54610d5f57600b549150610d34565b6000610d8282610c69670de0b6b3a7640000600b546138cf90919063ffffffff16565b90506000610dad612710610c69601a54610da7600b548761399690919063ffffffff16565b906138cf565b600b54909150610dbd9082613a09565b93506000601854118015610dd2575060185484115b15610ddd5760185493505b50505090565b600080610dee610ab3565b9050600c54811115610d34576000610e186064610c69601b54600b546138cf90919063ffffffff16565b9050808210610e7a576000610e44612710610c69601c54610da7600b548861399690919063ffffffff16565b600b54909150610e549082613a09565b93506000601954118015610e69575060195484115b15610e745760195493505b50610e80565b600b5492505b505090565b610e8d613a63565b15610ec95760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b610ed1613a82565b15610f0d5760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b600254421015610f60576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610fa457600080fd5b505afa158015610fb8573d6000803e3d6000fd5b505050506040513d6020811015610fce57600080fd5b50516001600160a01b031614801561105c57506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b50516001600160a01b0316145b80156110de57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d60208110156110d157600080fd5b50516001600160a01b0316145b801561116057506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561112957600080fd5b505afa15801561113d573d6000803e3d6000fd5b505050506040513d602081101561115357600080fd5b50516001600160a01b0316145b6111b1576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116111f05760405162461bcd60e51b815260040180806020018281038252602e8152602001806143ac602e913960400191505060405180910390fd5b60006111fa610ab3565b9050818114611250576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20544f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600c5481116112905760405162461bcd60e51b81526004018080602001828103825260328152602001806145f46032913960400191505060405180910390fd5b600061129a610de3565b9050600081116112f1576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611309670de0b6b3a7640000610c6987856138cf565b600654604080516370a0823160e01b8152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b505110156113c25760405162461bcd60e51b815260040180806020018281038252602581526020018061445a6025913960400191505060405180910390fd5b6113da6113d1600d54836139f3565b600d5490613996565b600d556007546040805163079cc67960e41b81523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505060065461146092506001600160a01b031690503383613aa1565b611468613af3565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b6001546001600160a01b0316331461152b5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b614e20811115611582576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601a55565b600154600160a01b900460ff1681565b600c5481565b60125481565b601a5481565b60195481565b600154600160a01b900460ff1690565b6001546001600160a01b031633146116085760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600b54811015801561163457506116306064610c696078600b546138cf90919063ffffffff16565b8111155b611674576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b600c55565b601d5481565b6001546001600160a01b031633146116c85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b614e2081111561171f576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601c55565b600b5481565b6020546001600160a01b031681565b6001546001600160a01b031633146117825760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b61271081101580156117965750614e208111155b6117d15760405162461bcd60e51b81526004018080602001828103825260298152602001806144d06029913960400191505060405180910390fd5b601d55565b6001546001600160a01b0316331461181f5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6006546001600160a01b038481169116141561186b576040805162461bcd60e51b815260206004808301919091526024820152633a37b6b160e11b604482015290519081900360640190fd5b6007546001600160a01b03848116911614156118b7576040805162461bcd60e51b81526020600480830191909152602482015263189bdb9960e21b604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611902576040805162461bcd60e51b8152602060048201526005602482015264736861726560d81b604482015290519081900360640190fd5b6119166001600160a01b0384168284613aa1565b505050565b611923613a63565b1561195f5760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b611967613a82565b156119a35760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b6002544210156119f6576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d6020811015611a6457600080fd5b50516001600160a01b0316148015611af257506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d6020811015611ae557600080fd5b50516001600160a01b0316145b8015611b7457506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611b3d57600080fd5b505afa158015611b51573d6000803e3d6000fd5b505050506040513d6020811015611b6757600080fd5b50516001600160a01b0316145b8015611bf657506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b50516001600160a01b0316145b611c47576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60008211611c865760405162461bcd60e51b81526004018080602001828103825260308152602001806144a06030913960400191505060405180910390fd5b6000611c90610ab3565b9050818114611ce6576040805162461bcd60e51b815260206004820152601a60248201527f54726561737572793a20544f4d42207072696365206d6f766564000000000000604482015290519081900360640190fd5b600b548110611d265760405162461bcd60e51b81526004018080602001828103825260328152602001806145f46032913960400191505060405180910390fd5b600454831115611d675760405162461bcd60e51b815260040180806020018281038252602a815260200180614626602a913960400191505060405180910390fd5b6000611d71610d38565b905060008111611dc8576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611de0670de0b6b3a7640000610c6987856138cf565b90506000611dec612aad565b90506000611e7483600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b505190613a09565b9050611e91612710610c69601454856138cf90919063ffffffff16565b811115611edb576040805162461bcd60e51b81526020600482015260136024820152726f766572206d6178206465627420726174696f60681b604482015290519081900360640190fd5b6006546040805163079cc67960e41b8152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b5050600754604080516340c10f1960e01b81523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b158015611f9a57600080fd5b505af1158015611fae573d6000803e3d6000fd5b505050506040513d6020811015611fc457600080fd5b5050600454611fd39088613996565b600455611fde613af3565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b601f5481565b6001546001600160a01b031681565b6001546001600160a01b031633146120b85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6103e881101580156120cc57506127108111155b61210c576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601455565b600d5490565b600d5481565b612125613a63565b156121615760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b612169613a82565b156121a55760405162461bcd60e51b81526004018080602001828103825260268152602001806145986026913960400191505060405180910390fd5b6002544210156121f8576040805162461bcd60e51b8152602060048201526019602482015278151c99585cdd5c9e4e881b9bdd081cdd185c9d1959081e595d603a1b604482015290519081900360640190fd5b6122006135f5565b421015612254576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561229857600080fd5b505afa1580156122ac573d6000803e3d6000fd5b505050506040513d60208110156122c257600080fd5b50516001600160a01b031614801561235057506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d602081101561234357600080fd5b50516001600160a01b0316145b80156123d257506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561239b57600080fd5b505afa1580156123af573d6000803e3d6000fd5b505050506040513d60208110156123c557600080fd5b50516001600160a01b0316145b801561245457506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561241d57600080fd5b505afa158015612431573d6000803e3d6000fd5b505050506040513d602081101561244757600080fd5b50516001600160a01b0316145b6124a5576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6124ad613af3565b6124b5610ab3565b601755600d546000906124d0906124ca612aad565b90613996565b90506015546003541015612506576125016124fc612710610c69601654856138cf90919063ffffffff16565b613b57565b612753565b600c54601754111561275357600754604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d602081101561258157600080fd5b5051600b5460175491925060009161259891613996565b905060008060006125b2655af3107a4000610da788613e97565b9050808411156125c0578093505b6125db612710610c69601154886138cf90919063ffffffff16565b600d5410612600576125f9670de0b6b3a7640000610c6988876138cf565b915061266c565b6000612618670de0b6b3a7640000610c6989886138cf565b9050612635612710610c69601254846138cf90919063ffffffff16565b92506126418184613996565b601d549094501561266a57612667612710610c69601d54876138cf90919063ffffffff16565b93505b505b811561267b5761267b82613b57565b821561274d57600d5461268e9084613a09565b600d55600654604080516340c10f1960e01b81523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156126e557600080fd5b505af11580156126f9573d6000803e3d6000fd5b505050506040513d602081101561270f57600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600354612762906001613a09565b600355600c54612770610ab3565b1161278e57612789612710610c69601354610da7612aad565b612791565b60005b600455436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b6001546001600160a01b031633146128185760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6009546040805163b3ab15fb60e01b81526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b15801561286657600080fd5b505af115801561287a573d6000803e3d6000fd5b5050505050565b6009546001600160a01b031681565b60008061289b610ab3565b9050600c54811115610d3457600654604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d602081101561291c57600080fd5b50519050600061292a610de3565b90508015610ddd5761294881610c6984670de0b6b3a76400006138cf565b935050505090565b6001546001600160a01b031633146129995760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60095460408051632ffaaa0960e01b8152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b1580156129ed57600080fd5b505af1158015612a01573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314612a525760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60025481565b60115481565b60058181548110612a8d57fe5b6000918252602090912001546001600160a01b0316905081565b60165481565b600654604080516318160ddd60e01b815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015612af657600080fd5b505afa158015612b0a573d6000803e3d6000fd5b505050506040513d6020811015612b2057600080fd5b505190506000805b60055460ff82161015612be257612bd8846001600160a01b03166370a0823160058460ff1681548110612b5757fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015612ba557600080fd5b505afa158015612bb9573d6000803e3d6000fd5b505050506040513d6020811015612bcf57600080fd5b50518390613a09565b9150600101612b28565b506129488282613996565b6001546001600160a01b03163314612c365760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6101f48110158015612c4a57506127108111155b612c8a576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601155565b601e546001600160a01b031681565b60035481565b6001546001600160a01b03163314612ced5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6078821115612d43576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b60648110158015612d5657506103e88111155b612d915760405162461bcd60e51b815260040180806020018281038252602e815260200180614650602e913960400191505060405180910390fd5b601591909155601655565b6001546000906001600160a01b03163314612de85760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60098360ff1610612e2a5760405162461bcd60e51b81526004018080602001828103825260298152602001806145216029913960400191505060405180910390fd5b60ff831615612e5c57600e6001840360ff1681548110612e4657fe5b90600052602060002001548211612e5c57600080fd5b60088360ff161015612e9157600e8360010160ff1681548110612e7b57fe5b90600052602060002001548210612e9157600080fd5b81600e8460ff1681548110612ea257fe5b6000918252602090912001555060015b92915050565b6001546001600160a01b03163314612f015760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60095460408051631515d6bd60e21b81526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b158015612f5e57600080fd5b505af1158015612f72573d6000803e3d6000fd5b50505050505050565b600154600160a01b900460ff1615612fda576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b600680546001600160a01b03199081166001600160a01b0389811691909117909255600780548216888416179055600880548216878416179055600a80548216868416179055600980549091169184169190911790556002819055670de0b6b3a7640000600b81905561305590606490610c699060656138cf565b600c556040805161012081018252600081526969e10de76676d0800000602082015269d3c21bcecceda1000000918101919091526a013da329b633647180000060608201526a01a784379d99db4200000060808201526a0422ca8b0a00a42500000060a08201526a084595161401484a00000060c08201526a108b2a2c2802909400000060e08201526a295be96e640669720000006101008201526130fe90600e9060096142d5565b5060408051610120810182526101c28152610190602082015261015e9181019190915261012c606082015260fa608082015260c860a0820152609660c0820152607d60e0820152606461010082015261315b90600f90600961432b565b50610190601055612710601155610dac601281905561012c601355601455606e601b55611b58601c9081556015556101c2601655600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156131da57600080fd5b505afa1580156131ee573d6000803e3d6000fd5b505050506040513d602081101561320457600080fd5b5051600d55600180546001600160a01b031960ff60a01b19909116600160a01b1716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a2505050505050565b6001546001600160a01b031633146132b15760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b601855565b600e81815481106132c357fe5b600091825260209091200154905081565b600f81815481106132c357fe5b6001546001600160a01b0316331461332a5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b601955565b60175481565b6001546001600160a01b0316331461337e5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61546081565b60185481565b6007546001600160a01b031681565b6001546001600160a01b031633146134045760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b6001600160a01b038416613448576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b610bb883111561348e576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b6001600160a01b0382166134d2576040805162461bcd60e51b815260206004808301919091526024820152637a65726f60e01b604482015290519081900360640190fd5b6103e8811115613518576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601e80546001600160a01b03199081166001600160a01b0396871617909155601f939093556020805490931691909316179055602155565b6001546001600160a01b031633146135995760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600954604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561286657600080fd5b6006546001600160a01b031681565b600061361a6136116154606003546138cf90919063ffffffff16565b60025490613a09565b905090565b600a5460065460408051630d01142560e31b81526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015610b1557600080fd5b601c5481565b601b5481565b6001546001600160a01b031633146136d65760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b606481101580156136e957506105dc8111155b613729576040805162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b604482015290519081900360640190fd5b601355565b6001546000906001600160a01b0316331461377a5760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b60098360ff16106137bc5760405162461bcd60e51b81526004018080602001828103825260298152602001806145216029913960400191505060405180910390fd5b600a82101580156137cf57506103e88211155b613817576040805162461bcd60e51b81526020600482015260146024820152735f76616c75653a206f7574206f662072616e676560601b604482015290519081900360640190fd5b81600f8460ff1681548110612ea257fe5b6001546001600160a01b031633146138715760405162461bcd60e51b815260040180806020018281038252602481526020018061454a6024913960400191505060405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60105481565b60145481565b60135481565b6008546001600160a01b031681565b60155481565b600a546001600160a01b031681565b60045481565b6000826138de57506000612eb2565b828202828482816138eb57fe5b04146139285760405162461bcd60e51b815260040180806020018281038252602181526020018061447f6021913960400191505060405180910390fd5b9392505050565b6000808211613985576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161398e57fe5b049392505050565b6000828211156139ed576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000818310613a025781613928565b5090919050565b600082820183811015613928576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611916908490613ef4565b600a60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613b4357600080fd5b505af1925050508015613b54575060015b50565b600654604080516340c10f1960e01b81523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015613bab57600080fd5b505af1158015613bbf573d6000803e3d6000fd5b505050506040513d6020811015613bd557600080fd5b5050601f5460009015613cc057613bfd612710610c69601f54856138cf90919063ffffffff16565b600654601e546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b158015613c5857600080fd5b505af1158015613c6c573d6000803e3d6000fd5b505050506040513d6020811015613c8257600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b60215460009015613da657613ce6612710610c69602154866138cf90919063ffffffff16565b600654602080546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101869052905194955092169263a9059cbb9260448082019392918290030181600087803b158015613d3e57600080fd5b505af1158015613d52573d6000803e3d6000fd5b505050506040513d6020811015613d6857600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b613db4816124ca8585613996565b600954600654919450613dd5916001600160a01b0390811691166000613fa5565b600954600654613df2916001600160a01b03918216911685613fa5565b600954604080516397ffe1d760e01b81526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015613e3f57600080fd5b505af1158015613e53573d6000803e3d6000fd5b5050604080514281526020810187905281517fa72fa2f263b243b0f0e1fec5f3d49d33de573d15929b6b730c6b8ab3838c1c4d9450908190039091019150a1505050565b600060085b600e8160ff1681548110613eac57fe5b90600052602060002001548310613ee157600f8160ff1681548110613ecd57fe5b600091825260209091200154601055613eea565b60001901613e9c565b5050601054919050565b6060613f49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140b89092919063ffffffff16565b80519091501561191657808060200190516020811015613f6857600080fd5b50516119165760405162461bcd60e51b815260040180806020018281038252602a81526020018061456e602a913960400191505060405180910390fd5b80158061402b575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613ffd57600080fd5b505afa158015614011573d6000803e3d6000fd5b505050506040513d602081101561402757600080fd5b5051155b6140665760405162461bcd60e51b81526004018080602001828103825260368152602001806145be6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611916908490613ef4565b60606140c784846000856140cf565b949350505050565b6060824710156141105760405162461bcd60e51b81526004018080602001828103825260268152602001806144346026913960400191505060405180910390fd5b6141198561422b565b61416a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106141a95780518252601f19909201916020918201910161418a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461420b576040519150601f19603f3d011682016040523d82523d6000602084013e614210565b606091505b5091509150614220828286614231565b979650505050505050565b3b151590565b60608315614240575081613928565b8251156142505782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561429a578181015183820152602001614282565b50505050905090810190601f1680156142c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090810192821561431f579160200282015b8281111561431f57825182906affffffffffffffffffffff169055916020019190600101906142f5565b50610d3492915061436c565b82805482825590600052602060002090810192821561431f579160200282015b8281111561431f578251829061ffff1690559160200191906001019061434b565b5b80821115610d34576000815560010161436d56fe5f7072656d69756d5468726573686f6c64206578636565647320746f6d6250726963654365696c696e6754726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e7454726561737572793a206661696c656420746f20636f6e73756c7420544f4d422070726963652066726f6d20746865206f7261636c655f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e745f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e636554726561737572793a20746f6d625072696365206e6f7420656c696769626c6520666f7220626f6e6420707572636861736554726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220f84776b0ef1e217fe627ac94bbc4bef59119545fd8d73adc6230de7ccb9e367c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12278,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5279,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5282,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5284,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5287,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epoch",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5290,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epochSupplyContractionLeft",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5306,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "excludedFromTotalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5308,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tomb",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5310,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tbond",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5312,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tshare",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5314,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "masonry",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5316,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tombOracle",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5318,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tombPriceOne",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5320,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "tombPriceCeiling",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5322,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageSaved",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5325,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "supplyTiers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5328,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxExpansionTiers",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 5330,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyExpansionPercent",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5332,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondDepletionFloorPercent",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5334,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageExpansionFloorPercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5336,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyContractionPercent",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5338,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDebtRatioPercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5340,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapEpochs",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5342,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapSupplyExpansionPercent",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5344,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "previousEpochTombPrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5346,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDiscountRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 5348,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxPremiumRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 5350,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "discountPercent",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 5352,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumThreshold",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 5354,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumPercent",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 5356,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "mintingFactorForPayingDebt",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 5358,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFund",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 5360,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFundSharedPercent",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 5362,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFund",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 5364,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundSharedPercent",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}