/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils} from 'ethers';
import {FunctionFragment, Result, EventFragment} from '@ethersproject/abi';
import {Listener, Provider} from '@ethersproject/providers';
import {TypedEventFilter, TypedEvent, TypedListener, OnEvent} from './common';

export interface BombTaxOracleInterface extends utils.Interface {
    functions: {
        'consult(address,uint256)': FunctionFragment;
        'owner()': FunctionFragment;
        'pair()': FunctionFragment;
        'renounceOwnership()': FunctionFragment;
        'setPair(address)': FunctionFragment;
        'setBomb(address)': FunctionFragment;
        'setWeth(address)': FunctionFragment;
        'bomb()': FunctionFragment;
        'transferOwnership(address)': FunctionFragment;
        'weth()': FunctionFragment;
    };

    encodeFunctionData(functionFragment: 'consult', values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'pair', values?: undefined): string;
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
    encodeFunctionData(functionFragment: 'setPair', values: [string]): string;
    encodeFunctionData(functionFragment: 'setBomb', values: [string]): string;
    encodeFunctionData(functionFragment: 'setWeth', values: [string]): string;
    encodeFunctionData(functionFragment: 'bomb', values?: undefined): string;
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
    encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'consult', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'pair', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setPair', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setBomb', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setWeth', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'bomb', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;

    events: {
        'OwnershipTransferred(address,address)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string], {previousOwner: string; newOwner: string}>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface BombTaxOracle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: BombTaxOracleInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        consult(_token: string, _amountIn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {amountOut: BigNumber}>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        pair(overrides?: CallOverrides): Promise<[string]>;

        renounceOwnership(overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

        setPair(_pair: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

        setBomb(_bomb: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

        setWeth(_weth: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

        bomb(overrides?: CallOverrides): Promise<[string]>;

        transferOwnership(newOwner: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

        weth(overrides?: CallOverrides): Promise<[string]>;
    };

    consult(_token: string, _amountIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

    setPair(_pair: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

    setBomb(_bomb: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

    setWeth(_weth: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

    bomb(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        consult(_token: string, _amountIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<string>;

        pair(overrides?: CallOverrides): Promise<string>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        setPair(_pair: string, overrides?: CallOverrides): Promise<void>;

        setBomb(_bomb: string, overrides?: CallOverrides): Promise<void>;

        setWeth(_weth: string, overrides?: CallOverrides): Promise<void>;

        bomb(overrides?: CallOverrides): Promise<string>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        weth(overrides?: CallOverrides): Promise<string>;
    };

    filters: {
        'OwnershipTransferred(address,address)'(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        consult(_token: string, _amountIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pair(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides & {from?: string | Promise<string>}): Promise<BigNumber>;

        setPair(_pair: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<BigNumber>;

        setBomb(_bomb: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<BigNumber>;

        setWeth(_weth: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<BigNumber>;

        bomb(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(newOwner: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<BigNumber>;

        weth(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        consult(_token: string, _amountIn: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides & {from?: string | Promise<string>}): Promise<PopulatedTransaction>;

        setPair(_pair: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<PopulatedTransaction>;

        setBomb(_bomb: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<PopulatedTransaction>;

        setWeth(_weth: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<PopulatedTransaction>;

        bomb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(newOwner: string, overrides?: Overrides & {from?: string | Promise<string>}): Promise<PopulatedTransaction>;

        weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
