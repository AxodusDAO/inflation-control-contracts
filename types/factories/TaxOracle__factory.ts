/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TaxOracle, TaxOracleInterface } from "../TaxOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bomb",
        type: "address",
      },
      {
        internalType: "address",
        name: "_btcb",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "bomb",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "btcb",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "uint144",
        name: "amountOut",
        type: "uint144",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBombBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcbBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bomb",
        type: "address",
      },
    ],
    name: "setBomb",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_btcb",
        type: "address",
      },
    ],
    name: "setBtcb",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    name: "setPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d94380380610d948339818101604052606081101561003357600080fd5b5080516020820151604090920151909190600061004e6101eb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0383166100f3576040805162461bcd60e51b815260206004820152601860248201527f626f6d6220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b03821661014e576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b6001600160a01b0381166101a9576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556101ef565b3390565b610b96806101fe6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80638187f5161161008c578063a8aa1b3111610066578063a8aa1b31146101f0578063b1b0c49e146101f8578063bb1365ca14610200578063f2fde38b14610208576100ce565b80638187f5161461019e5780638da5cb5b146101c457806398d5fdca146101e8576100ce565b806288cc10146100d35780631274e724146100ed5780633ddac9531461011557806343dbbd3e1461016857806353f4527014610170578063715018a614610196575b600080fd5b6100db61022e565b60408051918252519081900360200190f35b6101136004803603602081101561010357600080fd5b50356001600160a01b03166102b3565b005b6101416004803603604081101561012b57600080fd5b506001600160a01b038135169060200135610392565b6040805171ffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100db610513565b6101136004803603602081101561018657600080fd5b50356001600160a01b0316610567565b610113610646565b610113600480360360208110156101b457600080fd5b50356001600160a01b03166106f2565b6101cc6107d1565b604080516001600160a01b039092168252519081900360200190f35b6100db6107e0565b6101cc6108ff565b6101cc61090e565b6101cc61091d565b6101136004803603602081101561021e57600080fd5b50356001600160a01b031661092c565b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d60208110156102ac57600080fd5b5051905090565b6102bb610a2e565b6001600160a01b03166102cc6107d1565b6001600160a01b031614610315576040805162461bcd60e51b81526020600482018190526024820152600080516020610b41833981519152604482015290519081900360640190fd5b6001600160a01b038116610370576040805162461bcd60e51b815260206004820152601860248201527f626f6d6220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b038481169116146103f0576040805162461bcd60e51b81526020600482015260166024820152753a37b5b2b7103732b2b239903a37903132903137b6b160511b604482015290519081900360640190fd5b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d602081101561046e57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d60208110156104f057600080fd5b50519050610508816105028487610a32565b90610a92565b925050505b92915050565b600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561028257600080fd5b61056f610a2e565b6001600160a01b03166105806107d1565b6001600160a01b0316146105c9576040805162461bcd60e51b81526020600482018190526024820152600080516020610b41833981519152604482015290519081900360640190fd5b6001600160a01b038116610624576040805162461bcd60e51b815260206004820152601860248201527f6274636220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61064e610a2e565b6001600160a01b031661065f6107d1565b6001600160a01b0316146106a8576040805162461bcd60e51b81526020600482018190526024820152600080516020610b41833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106fa610a2e565b6001600160a01b031661070b6107d1565b6001600160a01b031614610754576040805162461bcd60e51b81526020600482018190526024820152600080516020610b41833981519152604482015290519081900360640190fd5b6001600160a01b0381166107af576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600154600354604080516370a0823160e01b81526001600160a01b0392831660048201529051600093849316916370a08231916024808301926020929190829003018186803b15801561083257600080fd5b505afa158015610846573d6000803e3d6000fd5b505050506040513d602081101561085c57600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156108b457600080fd5b505afa1580156108c8573d6000803e3d6000fd5b505050506040513d60208110156108de57600080fd5b505190506108f88161050284670de0b6b3a7640000610a32565b9250505090565b6003546001600160a01b031681565b6001546001600160a01b031681565b6002546001600160a01b031681565b610934610a2e565b6001600160a01b03166109456107d1565b6001600160a01b03161461098e576040805162461bcd60e51b81526020600482018190526024820152600080516020610b41833981519152604482015290519081900360640190fd5b6001600160a01b0381166109d35760405162461bcd60e51b8152600401808060200182810382526026815260200180610afa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600082610a415750600061050d565b82820282848281610a4e57fe5b0414610a8b5760405162461bcd60e51b8152600401808060200182810382526021815260200180610b206021913960400191505060405180910390fd5b9392505050565b6000808211610ae8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610af157fe5b04939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220330cc3a9eabb68a94575514b7b653d8629cb93a360c4faa89be567b0464d4a1d64736f6c634300060c0033";

type TaxOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TaxOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TaxOracle__factory extends ContractFactory {
  constructor(...args: TaxOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _bomb: string,
    _btcb: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TaxOracle> {
    return super.deploy(
      _bomb,
      _btcb,
      _pair,
      overrides || {}
    ) as Promise<TaxOracle>;
  }
  getDeployTransaction(
    _bomb: string,
    _btcb: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bomb, _btcb, _pair, overrides || {});
  }
  attach(address: string): TaxOracle {
    return super.attach(address) as TaxOracle;
  }
  connect(signer: Signer): TaxOracle__factory {
    return super.connect(signer) as TaxOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TaxOracleInterface {
    return new utils.Interface(_abi) as TaxOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TaxOracle {
    return new Contract(address, _abi, signerOrProvider) as TaxOracle;
  }
}
